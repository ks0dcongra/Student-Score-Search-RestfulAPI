kind: pipeline
type: docker
name: default

trigger:
  branch:
    - master
    - develop
    - fix/*
    - feat/*

steps:
  # - name: test
  #   image: golang:latest
  #   commands:
  #     - go test ./app/http/controller
  #     - go test ./app/http/middleware
  #     - go test ./app/repository
  #     - go test ./app/service

  - name: Load-aws-cli
    image: alpine:latest
    environment:
      access_key:
        from_secret: AWS_access
      secret_key:
        from_secret: AWS_secret
      DB_PASSWORD:
        from_secret: DB_PASSWORD
      DB_HOST:
        from_secret: DB_HOST
      DB_DRIVER:
        from_secret: DB_DRIVER
      DB_USER:
        from_secret: DB_USER
      DB_NAME:
        from_secret: DB_NAME
      DB_PORT:
        from_secret: DB_PORT
    commands:
      - apk update
      - apk add --no-cache aws-cli
      - apk add --no-cache jq
      - echo "DB_HOST=$DB_HOST" >> .env
      - echo "DB_DRIVER=$DB_DRIVER" >> .env
      - echo "DB_USER=$DB_USER" >> .env
      - export DB_PASSWORD=$DB_PASSWORD >> .env
      - echo "DB_NAME=$DB_NAME" >> .env
      - echo "DB_PORT=$DB_PORT" >> .env
      # - export DB_PASSWORD=$DB_PASSWORD && DB_HOST=$DB_HOST && DB_DRIVER=$DB_DRIVER && DB_USER=$DB_USER && DB_NAME=$DB_NAME && DB_PORT=$DB_PORT
      # - export AWS_ACCESS_KEY_ID=$access_key && export AWS_SECRET_ACCESS_KEY=$secret_key
      # - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      # - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      # - aws configure set region us-east-1
      # - aws configure set output json
      # - aws secretsmanager get-secret-value --secret-id drone --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
      - cat .env

  # - name: publish-to-ecr
  #   image: plugins/ecr
  #   settings:
  #     access_key: 
  #       from_secret: AWS_access
  #     secret_key: 
  #       from_secret: AWS_secret
  #     repo: andy_trainings
  #     registry: 520096271983.dkr.ecr.us-east-1.amazonaws.com
  #     region: us-east-1

  # - name: deploy-to-eks
  #   image: alpine:latest
  #   environment:
  #     access_key_EKS:
  #       from_secret: AWS_access_EKS
  #     secret_key_EKS:
  #       from_secret: AWS_secret_EKS
  #   commands:
  #     - apk update
  #     - apk add --no-cache aws-cli
  #     - apk add --update ca-certificates
  #     - apk add --update curl
  #     - curl -L "https://dl.k8s.io/release/v1.27.2/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
  #     - chmod +x /usr/local/bin/kubectl
  #     - export AWS_ACCESS_KEY_ID=$access_key_EKS
  #     - export AWS_SECRET_ACCESS_KEY=$secret_key_EKS
  #     - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  #     - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  #     - aws configure set region us-east-2
  #     - aws eks update-kubeconfig --name drone --region us-east-2 
  #     - kubectl cluster-info
  #     - kubectl apply -f eks/aws-auth.yaml
  #     - kubectl apply -f eks/deployment.yaml
  #     - kubectl apply -f eks/service.yaml
  #     - kubectl describe svc
    
  # - name: testpostgres
  #   image: postgres:9-alpine
  #   commands:
  #     - sleep 5 #give the service some time to start
  #     - psql -U postgres -d dbexample -h database

  # - name: build
  #   image: golang:latest
  #   commands:
  #     - go build main.go

  # - name: test
  #   image: golang:latest
  #   commands:
  #     - go test ./app/http/controller
  #     - go test ./app/http/middleware
  #     - go test ./app/repository
  #     - go test ./app/service

# services:
#   - name: database
#     image: postgres:9-alpine
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#       POSTGRES_DB: dbexample
#       POSTGRES_HOST_AUTH_METHOD: trust