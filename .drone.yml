kind: pipeline
type: docker
name: default

trigger:
  branch:
    - master
    - develop
    - fix/*
    - feat/*

steps:
  - name: Load-aws-cli
    image: alpine:latest
    environment:
      access_key:
        from_secret: AWS_access
      secret_key:
        from_secret: AWS_secret
      access_key_EKS:
        from_secret: AWS_access_EKS
      secret_key_EKS:
        from_secret: AWS_secret_EKS
    commands:
      - apk update
      - apk add --no-cache aws-cli
      # - apk add --no-cache jq
      # - export AWS_ACCESS_KEY_ID=$access_key
      # - export AWS_SECRET_ACCESS_KEY=$secret_key
      # - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      # - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      # - aws configure set region us-east-1
      # - aws configure set output json
      # - aws secretsmanager get-secret-value --secret-id drone --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
      # - cat .env
      - apk add --update ca-certificates
      - apk add -t deps
      - apk add --update curl
      - export ARCH="$(uname -m)" && if [[ ${ARCH} == "x86_64" ]]; then export ARCH="amd64"; elif [[ ${ARCH} == "aarch64" ]]; then export ARCH="arm64"; fi && curl -L https://dl.k8s.io/release/${KUBE_LATEST_VERSION}/bin/linux/${ARCH}/kubectl -o /usr/local/bin/kubectl \
      - chmod +x /usr/local/bin/kubectl
      - apk del --purge deps
      - rm /var/cache/apk/*
      - export AWS_ACCESS_KEY_ID=$access_key_EKS
      - export AWS_SECRET_ACCESS_KEY=$secret_key_EKS
      - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - aws configure set region us-east-2
      - aws configure set output json
      - aws eks update-kubeconfig --name drone --region us-east-2
      - kubectl cluster-info
      - kubectl apply -f eks/aws-auth.yaml
      - kubectl apply -f eks/deployment.yaml
      - kubectl apply -f eks/service.yaml

  # - name: publish-to-ecr
  #   image: plugins/ecr
  #   settings:
  #     access_key: 
  #       from_secret: AWS_access
  #     secret_key: 
  #       from_secret: AWS_secret
  #     repo: andy_trainings
  #     registry: 520096271983.dkr.ecr.us-east-1.amazonaws.com
  #     region: us-east-1

  # - name: deploy-to-eks
  #   image: alpine:latest
  #   environment:
  #     access_key_EKS:
  #       from_secret: AWS_access_EKS
  #     secret_key_EKS:
  #       from_secret: AWS_secret_EKS
  #   commands:
  #     - apk update
  #     - apk add --no-cache aws-cli
  #     - apk add --no-cache kubectl
  #     - export AWS_ACCESS_KEY_ID=$access_key_EKS
  #     - export AWS_SECRET_ACCESS_KEY=$secret_key_EKS
  #     - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  #     - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  #     - aws configure set region us-east-2
  #     - aws configure set output json
  #     - aws eks update-kubeconfig --name drone --region us-east-2
  #     - kubectl cluster-info
  #     - kubectl apply -f eks/aws-auth.yaml
  #     - kubectl apply -f eks/deployment.yaml
  #     - kubectl apply -f eks/service.yaml
    
  # - name: testpostgres
  #   image: postgres:9-alpine
  #   commands:
  #     - sleep 5 #give the service some time to start
  #     - psql -U postgres -d dbexample -h database

  # - name: build
  #   image: golang:latest
  #   commands:
  #     - go build main.go

  # - name: test
  #   image: golang:latest
  #   commands:
  #     - go test ./app/http/controller
  #     - go test ./app/http/middleware
  #     - go test ./app/repository
  #     - go test ./app/service

# services:
#   - name: database
#     image: postgres:9-alpine
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#       POSTGRES_DB: dbexample
#       POSTGRES_HOST_AUTH_METHOD: trust

  # - name: testdeploydatabase
  #   image: golang:latest
  #   environment:
  #     DB_HOST: database
  #     DB_DRIVER: postgres
  #     DB_USER: postgres
  #     DB_PASSWORD: Aa123456
  #     DB_NAME: dbexample
  #     DB_PORT: 5432
  #   commands:
  #     - ./main -h database deploy


      
  # - name: publish_to_prod
  #   image: plugins/docker
  #   settings:
  #     registry: localhost:8000
  #     repo: localhost:8000/app
# steps:   
#   - name: publish_to_prod
#     image: plugins/docker
#       commands:
#         - docker compose up
#     settings:
#       registry: 697d-61-31-138-103.ngrok-free.app
#       repo: 697d-61-31-138-103.ngrok-free.app
  
#   - name: publish
#     pull: always
#     image: plugins/docker
#     settings:
#       auto_tag: true
#       auto_tag_suffix: linux-amd64
#       cache_from: appleboy/gorush
#       daemon_off: false
#       dockerfile: docker/Dockerfile.linux.amd64
#       password:
#         from_secret: docker_password
#       repo: appleboy/rush
#       username:
#         from_secret: docker_username
  
# - name: deploy-staging
#   image: drone/drone-deploy
#   settings:
#     server: http://a7e0-61-31-138-103.ngrok-free.app
#     token:
#     from_secret: drone_token
#     repo: octocat/hello-world
#     build: 24
#     environment: staging
#   when:
#     event: deployment

# - name: deploy-production
#   image: drone/drone-deploy
#   settings:
#     server: htts://a7e0-61-31-138-103.ngrok-free.app
#     token:
#       from_secret: drone_token
#     repo: octocat/hello-world
#     build: 24
#     environment: production
#   when:
#      event: deployment